#!/usr/bin/env perl

use strict;
use locale;

use IO::File;
use File::Temp qw/ tempfile /;

my ($HOME, $VERB) = (scalar(length($ENV{'HOME'}) ? $ENV{'HOME'} : '~'), shift(@ARGV));

my ($AUTH, $URL) = @{rc()};

my $LOGSTASH = 0;

my $CURL = '';
#############################
# Try to find installed curl
# Uncomment one of the following lines and modiy path as necessary
#############################

# $CURL = 'C:\Users\rodba\curl\curl-7.78.0-win64-mingw\bin\curl.exe';
$CURL = `which curl`; chomp($CURL);

#############################
# End curl setup
#############################

if( ( length( $CURL ) == 0 ) || ( ! -e $CURL ) || ( ! -r $CURL  ) ) {
    printf( STDERR "ERROR: curl command not found or is not executable\n" );
    printf( STDERR "       You may need to adjust the \$CURL variable at the top of this PERL script\n" );
    printf( STDERR "       \$CURL = %s\n", $CURL || '<empty string>' );
    exit( 1 );
}

my $UP_SMAP = {
	'log'    => {'p'=>qr/[a-zA-Z0-9\_\-]++/xs, 'c'=>'[a-zA-Z0-9_-]',    'h'=>'log', 'l'=>32, },
	'dtz'    => {'p'=>qr/[\w\/\+\-\:]++/xs,    'c'=>'[a-zA-Z0-9_/+-:]', 'h'=>'dtz', 'l'=>32, },
	'ids'    => {'p'=>qr/[\x21-\x7e]++/xs,     'c'=>'ascii 0x21-0x7e',  'h'=>'ids',  'l'=>65536, },
	'cfgs'   => {'p'=>qr/[\x21-\x7e]++/xs,     'c'=>'ascii 0x21-0x7e',  'h'=>'cfgs', 'l'=>65536, },
	'tags'   => {'p'=>qr/[\x21-\x7e]++/xs,     'c'=>'ascii 0x21-0x7e',  'h'=>'tags', 'l'=>65536, },
};
my $UP_SKEYS = [keys %$UP_SMAP];

# AT SOME POINT SHOULD MOVE OTHER Ze-Query TYPE HEADERS INTO THESE STRUCTURES, TOO
my $CAT_SMAP = {
	'log'    => {'p'=>qr/[a-zA-Z0-9\_\,\-]++/xs, 'c'=>'[a-zA-Z0-9_-]',    'h'=>'X-Ze-Query-Log',    'l'=>32, },
	'ids'    => {'p'=>qr/[\x21-\x7e]++/xs,       'c'=>'ascii 0x21-0x7e',  'h'=>'X-Ze-Query-Ids',  	'l'=>65536, },
	'cfgs'   => {'p'=>qr/[\x21-\x7e]++/xs,       'c'=>'ascii 0x21-0x7e',  'h'=>'X-Ze-Query-Configs','l'=>65536, },
	'tags'   => {'p'=>qr/[\x21-\x7e]++/xs,       'c'=>'ascii 0x21-0x7e',  'h'=>'X-Ze-Query-Tags',	'l'=>65536, },
};
my $CAT_SKEYS = [keys %$CAT_SMAP];

my $CAT_DMAP = {
};

my $CAT_DKEYS = [keys %$CAT_DMAP];

main();

exit(0);

sub main() {

	if($VERB =~ m/help/xsi ) {
		print STDERR usage(), chr(10) or die("$!");
		exit(0);
	}

	common();

	if($VERB eq 'up') {
		up();
	} elsif($VERB eq 'cat') {
		cat();
	} elsif($VERB eq 'def') {
		zdef();
	} elsif($VERB eq 'close') {
		print STDERR "close is no longer supported";
		exit(0)
	} elsif($VERB eq 'sql') {
		sql();
	} else {
		print STDERR usage(), chr(10) or die("$!");
		exit(1);
	}

	return();
}

sub common() {

        my %valid_verbs = map {$_ => 1} qw( help up cat def sql );

        if( ! exists( $valid_verbs{$VERB} ) ) {
                printf( STDERR "Zebrium\n" );
                printf( STDERR "Invalid action (%s). Must be one of: %s\n", $VERB || 'none', join( ', ', sort keys( %valid_verbs ) ) );
		printf( STDERR "Use \"$0 help\" for details\n");
		exit(1);
	}

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-auth\=(.++)$/xs) {
			$AUTH = $1;
			if ($AUTH eq "0") {
				$AUTH = "0000000000000000000000000000000000000000";
			}
			unless($AUTH=~m/^[a-zA-Z\d]++$/xs) {
				die("$0: auth token should be alphanumeric");
			}
			splice(@ARGV,$i,1); $i--; next;
		} elsif($arg=~m/^\-\-url\=(.++)$/xs) {
			$URL = $1;
			unless($URL=~m/^[\w\,\.\+\&\=\%\:\/\-]++$/xs) {
				die("$0: url should only have chars [a-zA-Z0-9i_,.+&=%:/-]");
			}
			splice(@ARGV,$i,1); $i--; next;
		} elsif($arg=~m/^\-\-logstash$/xs) {
			$LOGSTASH = 1;
			splice(@ARGV,$i,1); $i--; next;
		}
	}

	$URL=~s/\/++$//xs;
	unless(length($URL)) {
		die("$0: url must be set with switch --url=<url> or else the line url=<url> must be present in $HOME/.zerc.\nUse \"$0 help\" for details\n");
	}

	unless(length($AUTH)) {
		die("$0: auth must be set with --auth=<auth token> or else the line auth=<auth token> in $HOME/.zerc.\nUse \"$0 help\" for details\n");
	}

	return();
}

sub zdef() {

	my ($amap) = ({});

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-etype\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Etype'} = $1;
		} else {
			die("$0: unsupported arg $arg");
		}
	}

	$URL=~s/\/(?:sql|def|close|ask|cat|post|api|)\/?$//xs;
	$URL=join('/',($URL,'api/v2/def'));

	my $ze_hdrs_str = '';
	my $amap_keys = [keys %$amap];
	foreach my $key(@$amap_keys) {
		if($key=~m/^X\-Ze\-/xs) {
			$ze_hdrs_str = sprintf( "%s -H \"%s: %s\"", $ze_hdrs_str, $key, $amap->{$key} );
		}
	}
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/octet-stream\" %s -X POST \"%s\"",
			$CURL,
			$AUTH,
			$ze_hdrs_str,
			$URL);
	my $result = `$cmd`;
	my $exit_code = $?;
	if( $exit_code ) {
		printf( STDERR "ERROR: Unable to get data\n" );
		exit( $exit_code );
	}
	printf( STDOUT "%s", $result );
	return();
}

sub cat() {

	my ($amap) = (zargs($CAT_SMAP, $CAT_SKEYS));

	$URL=~s/\/(?:sql|def|close|ask|cat|post|api|)\/?$//xs;
	$URL=join('/',($URL,'api/v2/cat'));

	dcheck($amap, $CAT_DMAP, $CAT_DKEYS);

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-fmt\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Format'} = $1;
		} elsif($arg=~m/^\-\-lim\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Limit'} = $1;
		} elsif($arg=~m/^\-\-etype\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Etype'} = $1;
		} elsif($arg=~m/^\-\-time\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Time'} = $1;
		} elsif($arg=~m/^\-\-new$/xs) {
			$amap->{'X-Ze-Query-New'} = 1;
		} #else {
			#die("$0: unsupported arg $arg");
		#}
	}

	my $ze_hdrs_str = '';
	my $amap_keys = [keys %$amap];
	foreach my $key(@$amap_keys) {
		if($key=~m/^X\-Ze\-/xs) {
			$ze_hdrs_str = sprintf( "%s -H \"%s: %s\"", $ze_hdrs_str, $key, $amap->{$key} );
		}
	}
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" %s \"%s\"",
			$CURL,
			$AUTH,
			$ze_hdrs_str,
			$URL);
	my $result = `$cmd`;
	my $exit_code = $?;
	if( $exit_code ) {
		printf( STDERR "ERROR: Unable to get data\n" );
		exit( $exit_code );
	}
	printf( STDOUT "%s", $result );
	return();
}

sub sql() {

        my ( $fh, $fn, $amap, $curl_fn ) = ( undef, undef, {}, undef );

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-file\=(.++)$/xs) {
			$fn = $1;
			unless($fn=~m/^[\x21-\x7e]++$/xs) {
				printf( STDERR "ERROR: File %s should be ascii non-whitespace\n", $fn );
				exit( 1 );
			}
			if(! -e $fn) {
				printf( STDERR "ERROR: File %s does not exist (%s)\n", $fn, $! );
				exit( 1 );
                        }
                        splice(@ARGV,$i,1); $i--; next;
                } elsif($arg=~m/^\-\-file$/xs) {
			printf( STDERR "ERROR: File argument must be specified (--file=...)\n" );
			exit( 1 );
                }
	}

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-fmt\=(.++)$/xs) {
			$amap->{'X-Ze-Query-Format'} = $1;
		} elsif($arg=~m/^\-\-query\=(.++)$/xs) {
			my $qtxt = $1;
			if(defined $fn) {
				die("$0: Cannot specify both file and query");
			}
			unless($qtxt=~m/\;\s*$/xs) { $qtxt=~s/\s*$/\;/xs; }
			($fh, $fn) = tempfile();
			print $fh $qtxt,chr(10) or die("$!");
			$fh->flush();
			$fh->close() or die("$!");
		} else {
			die("$0: unsupported arg $arg");
		}
	}

	$URL=~s/\/(?:sql|def|close|ask|cat|post|api|)\/?$//xs;
	$URL=join('/',($URL,'api/v2/sql'));

	$curl_fn = length($fn) ? $fn : '-';

	my $ze_hdrs_str = '';
	my $amap_keys = [keys %$amap];
	foreach my $key(@$amap_keys) {
		if($key=~m/^X\-Ze\-/xs) {
			$ze_hdrs_str = sprintf( "%s -H \"%s: %s\"", $ze_hdrs_str, $key, $amap->{$key} );
		}
	}
	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/octet-stream\" -H \"Transfer-Encoding: chunked\" %s -X POST -T %s \"%s\"",
			$CURL,
			$AUTH,
			$ze_hdrs_str,
			$curl_fn,
			$URL);
	my $result = `$cmd`;
	my $exit_code = $?;
	if( $exit_code ) {
		printf( STDERR "ERROR: Unable to get data\n" );
		exit( $exit_code );
	}
	printf( STDOUT "%s", $result );
	return();
}

sub up() {

	my ($fn, $amap, $curl_fn ) = (undef, zargs($UP_SMAP, $UP_SKEYS), undef);

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		if($arg=~m/^\-\-file\=(.++)$/xs) {
			$fn = $1;
			unless($fn=~m/^[\x21-\x7e]++$/xs) {
				die("$0: file should be ascii non-whitespace");
			}
                        if(! -e $fn) {
                                die("$0: file $fn does not exist");
                        }
			splice(@ARGV,$i,1); $i--; next;
		} elsif($arg=~m/^\-\-file$/xs) {
			printf( STDERR "ERROR: File argument must be specified (--file=...)\n" );
			exit( 1 );
                }
	}

	if( scalar(keys %$amap) == 0 and ! $LOGSTASH ) {
		print STDERR "$0: WARNING: No metadata switches set. That's fine for a quick test, but probably not what you want in real use. Run 'ze help' for more information.\n" or die("$!");
	}

	require JSON;

	my %meta_data;
	$meta_data{ 'stream' } = 'native';
	$meta_data{ 'ze_tm' } = $JSON::false;
	if(length($fn)) {
	        $meta_data{ 'stream' } = 'file';
		unless(length($amap->{'log'})) {
			if($fn=~m/(?=[^\/]++$)([a-zA-Z]{3,})/xs) {
				$meta_data{'logbasename'} = lc($1);
			} else {
				$meta_data{'logbasename'} = 'stream';
			}
		}
	} else {
	        if( ! exists( $amap->{'log'} ) and ! $LOGSTASH ) {
                    die("$0: logbasename must be specified for streaming (--log=...)");
	        }
	}

	$URL=~s/\/(?:sql|def|close|ask|cat|post|api|)\/?$//xs;
	my $TOKEN_URL = join('/',($URL,'api/v2/token'));
	my $POST_URL = join('/',($URL, $LOGSTASH ? 'log/api/v2/ingest?log_source=logstash&log_format=json_batch' : 'api/v2/post'));

	$curl_fn = length($fn) ? $fn : '-';

	my $amap_keys = [keys %$amap];
	foreach my $key(@$amap_keys) {
		if ($key =~ m/^log/xs) {
	                $meta_data{ 'logbasename' } = $amap->{$key};
                } elsif ($key =~ m/^dtz/xs) {
                        $meta_data{ 'tz' } = $amap->{$key};
		} else {
			my %kvs = split /[,=]/, $amap->{$key};
	                $meta_data{ $key } = \%kvs;
		}
	}
	my $json_text = JSON::encode_json(\%meta_data);
	my ($meta_fh, $meta_fname) = tempfile();
	print $meta_fh JSON::encode_json(\%meta_data);
	$meta_fh->flush();

	my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/json\" -X POST -T %s \"%s\"",
			$CURL,
			$AUTH,
			$meta_fname,
			$TOKEN_URL);
        my $result = `$cmd`;
        my $exit_code = $?;
        if( $exit_code != 0 ) {
            printf( STDERR "Unable to reach server\n" );
            exit( 1 );
        }
        if( $result =~ /\<title\>(.*)\<\/title\>/xsi ) {
            printf( STDERR "Unable to get API result from server (%s)\n", $1 );
            exit( 1 );
        }
        my $data = JSON::decode_json($result);
        my $stream_token = '';
        if (exists($data->{'token'})) {
                $stream_token = $data->{'token'};
        } else {
		my $reason = 'Unknown';
		if( exists( $data->{'description'} ) && exists( $data->{'title'} ) ) {
			$reason = sprintf( "%s - %s", $data->{'title'}, $data->{'description'} );
		}
		printf( STDERR "ERROR: No stream token returned by server\n" );
		printf( STDERR "       Reason: %s\n", $reason );
		printf( STDERR "       Please check that you have specified a valid auth token\n" );
		exit( 1 );
        }

        my $cmd = sprintf("%s --silent -S --insecure -H \"Authorization: Token %s\" -H \"Content-Type: application/octet-stream\" -H \"Transfer-Encoding: chunked\" -X POST -T %s \"%s\"",
			$CURL,
			$LOGSTASH ? $AUTH : $stream_token,
			$curl_fn,
			$POST_URL);
	my $result = `$cmd`;
	my $exit_code = $?;
	if( $exit_code ) {
		printf( STDERR "ERROR: Unable to send data\n" );
		exit( $exit_code );
	}
	printf( STDOUT "Sent successfully\n" );
	unlink $meta_fname;
	return();
}

sub zargs($$) {

	my ($amap, $smap, $skeys) = ({}, splice(@_, 0, 2));

	for(my $i=0;$i<scalar(@ARGV);$i++) {

		my $arg = $ARGV[$i];
		for(my $j=0;$j<scalar(@$skeys);$j++) {

			my $s = $skeys->[$j];
			if(substr($arg,0,length($s)+3) eq "--$s=") {

				my $m = $smap->{$s};
				my ($p,$c,$h,$l) = ($m->{'p'},$m->{'c'},$m->{'h'},$m->{'l'});

				if(length($c)) {
					if($arg=~m/^\-\-$s\=(${p})$/xs) {
						my $tmp = $1;
						if(length($tmp) > $l) {
							die("$0: arg $arg: up to $l characters allowed");
						}
						$amap->{$h} = $tmp;
						splice(@$skeys,$j,1); $j--; next;
					} else {
						die("$0: arg $arg: only $c characters allowed");
					}
				} else {
					if($arg=~m/^\-\-$s$/xs) {
						$amap->{$h} = 1;
						splice(@$skeys,$j,1); $j--; next;
					} else {
						die("$0: arg $arg: no assignment allowed (flag only)");
					}
				}
			}
		}
	}

	return($amap);
}

sub dcheck($$$) {

	my ($amap, $dmap, $dkeys) = splice(@_, 0, 3);

	for(my $i=0;$i<scalar(@$dkeys);$i++) {

		my $hdr = $dkeys->[$i];
		if(length($dmap->{$hdr}) && !length($amap->{$hdr})) {

			$amap->{$hdr} = $dmap->{$hdr};
		}
	}

	return();
}

sub rc() {

	my ($fh, $auth, $url) = (new IO::File(), undef, undef);

	if(open($fh,"<$HOME/.zerc")) {

		while(my $line = readline($fh)) {
			if($line=~m/^auth\=([a-zA-Z\d]++)\s*+$/xs) {
				$auth = $1;
			} elsif($line=~m/^url\=([\w\-\,\.\+\&\=\%\:\/]++)\s*+$/xs) {
				$url = $1;
			}
		}

		close($fh);
		undef($fh);
		$! = '';

	} else {

		undef($fh);
		$! = '';
	}

	return([$auth,$url]);
}

sub usage() {
	# cat [--fmt=<(csv|json|pp)>] [--lim=<int>] [--log=<log>] [--etype=<etype>] [--time=<time>] [--new]
	# def [--fmt=<(csv|json|pp)>] [--lim=<int>] [--log=<log>] [--etype=<etype>]
	# sql [--fmt=<(csv|json|pp)>]
	return(join(chr(10),(
		"ze help - get help on ze usage",
		"",
		"ze up - upload data to Zebrium",
		"",
		"  ze up                                                                        \\",
		"    [--file=<path>] [--auth=<token>] [--url=<url>] [--log=<log>] [--dtz=<tz>]  \\",
		"    [--ids=<name1=val1,name2=val2,...] [--cfgs=<name1=val1,name2=val2,...]     \\",
		"    [--tags=<name1=val1,name2=val2,...]",
		"    [--logstash]",
		"",
		"    --file     - omit to read from STDIN",
		"    --auth     - omit to look for auth=<token> line in $HOME/.zerc",
		"    --url      - omit to look for url=<url> line in $HOME/.zerc",
		"    --log      - omit to use use base name from file=<path> (or 'stream' if STDIN)",
		"    --dtz      - timezone to use for logs without time zone (default: GMT)",
		"    --ids      - ids of the stream as a comma-separated list of name-value pairs",
		"    --cfgs     - configs of the stream as a comma-separated list of name-value pairs",
		"    --tags     - tags of the stream as a comma-separated list of name-value pairs",
		"    --logstash - file is in logstash format with appropriate \@ze_ keys",
		"",
		"ze sql - run SQL command",
		"",
		"  ze sql                                                                       \\",
		"    [--file=<path>] [--auth=<token>] [--url=<url>] [--query=<query>]           \\",
		"    [--fmt=(csv|json|pp|raw)>]",
		"",
		"    --file   - omit to read from STDIN or query=<query>",
		"    --auth   - omit to look for auth=<token> line in $HOME/.zerc",
		"    --url    - omit to look for url=<url> line in $HOME/.zerc",
		"    --query  - omit to read from STDIN or file=<file>",
		"    --fmt    - show lines raw, or along with etype in csv/json/pretty-print",
		"",
		"ze def - show etype definition",
		"",
		"  ze def --etype=<etype> [--auth=<token>] [--url=<url>]                        \\",
		"",
		"    --etype  - show only events of type <etype>",
		"    --auth   - omit to look for auth=<token> line in $HOME/.zerc",
		"    --url    - omit to look for url=<url> line in $HOME/.zerc",
		"",
		"ze cat - show logs",
		"",
		"  ze cat                                                                       \\",
		"    [--auth=<token>] [--url=<url>] [--fmt=(csv|json|pp|raw)>] [--lim=<int>]    \\",
		"    [--ids=<name1=val1,name2=val2,...] [--cfgs=<name1=val1,name2=val2,...]     \\",
		"    [--tags=<name1=val1,name2=val2,...]",
		"    [--log=<log>] [--etype=<etype>] [--new] [--time=<yyyy[-mm[-dd[Thh[:mi[:ss]]]]]>]",
		"",
		"    --auth   - omit to look for auth=<token> line in $HOME/.zerc",
		"    --url    - omit to look for url=<url> line in $HOME/.zerc",
		"    --fmt    - show lines raw, or along with etype in csv/json/pretty-print",
		"    --lim    - limit output to <int> events",
		"    --ids    - ids of the log as a comma-separated list of name-value pairs",
		"    --cfgs   - configs of the log as a comma-separated list of name-value pairs",
		"    --tags   - tags of the log as a comma-separated list of name-value pairs",
		"    --log    - show only events from <log>",
		"    --etype  - show only events of type <etype>",
		"    --new    - show only first-ever occurrence by etype",
		"    --time   - limit results in time: truncating timestamp widens window",
	)));
}
